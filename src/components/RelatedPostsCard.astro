---
import { getCollection } from "astro:content";
import type { CollectionEntry } from "astro:content";
import OptimizedCover from "@components/OptimizedPicture.astro";
import FormattedDate from "@components/FormattedDate.astro";
import { getRelativeLocaleUrl } from "astro:i18n";
import { getCurrentLocale } from "@utils/localeUtils";
import { getEnglishCategory } from "@utils/categoryMapping";

interface Props {
  currentCategory: string;
  currentSlug: string;
}

const { currentCategory, currentSlug } = Astro.props;
const currentLocale = getCurrentLocale(Astro.url.pathname);

async function getRelatedArticlesByCategory(): Promise<
  CollectionEntry<"posts">[]
> {
  const allPosts = await getCollection("posts");

  const commonCurrentCategory = getEnglishCategory(
    currentCategory,
    currentLocale,
  );

  return allPosts
    .filter((post) => {
      const postCommonCategories = post.data.category.map((cat) =>
        getEnglishCategory(cat, currentLocale),
      );

      return (
        postCommonCategories.includes(commonCurrentCategory) &&
        post.slug !== currentSlug &&
        post.slug.startsWith(currentLocale)
      );
    })
    .sort(
      (a, b) =>
        new Date(b.data.pubDate).valueOf() - new Date(a.data.pubDate).valueOf(),
    )
    .slice(0, 3);
}

const relatedPosts = await getRelatedArticlesByCategory();

const safeGetRelativeLocaleUrl = (path: string) =>
  getRelativeLocaleUrl(currentLocale, path);
---

<div class="grid grid-cols-1 gap-4 md:grid-cols-3">
  {relatedPosts.map((post) => {
    const cleanSlug = post.slug.replace(/^[a-z]{2}\//, "");
    return (
      <div class="overflow-hidden rounded-xl bg-white transition-transform duration-500 hover:-translate-y-1 hover:scale-105 dark:bg-neutral-900">
        <a
          href={safeGetRelativeLocaleUrl(`posts/${cleanSlug}`)}
          class="block relative h-full"
        >
          <OptimizedCover src={post.data.cover} alt={post.data.coverAlt} />
          <div class="absolute bottom-0 end-0 start-0 bg-gradient-to-t p-4 md:p-5">
            <div class="mt-16 flex items-center gap-4 text-xs text-white">
              <div class="flex flex-wrap gap-2">
                {post.data.tags.map((tag) => (
                  <span>
                    {tag}
                  </span>
                ))}
              </div>
              <FormattedDate date={post.data.pubDate} />
            </div>
            <h2 class="mt-2 text-lg font-bold text-white">
              {post.data.title}
            </h2>
          </div>
        </a>
      </div>
    );
  })}
</div>