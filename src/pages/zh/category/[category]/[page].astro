---
import type { GetStaticPaths } from "astro";
import type { CollectionEntry } from "astro:content";
import { getCollection } from "astro:content";
import BaseLayout from "@layouts/BaseLayout.astro";
import PostCard from "@components/CommonCard.astro";
import Pagination from "@components/Pagination.astro";
import { getCategoryMetadata } from "@consts";
import CategorySchema from "@seo/CategorySchema.astro";
import { getEnglishCategory, getCategoryByLanguage } from "@utils/categoryMapping";

export const getStaticPaths = (async () => {
  const allPosts = await getCollection("posts", ({ id }) =>
    id.startsWith("zh/"),
  );

  const allCommonCategories = allPosts.flatMap((post) =>
    post.data.category.map((cat) => getEnglishCategory(cat, "zh")),
  );
  const uniqueCategories = [...new Set(allCommonCategories)];

  return uniqueCategories.flatMap((category) => {
    const filteredPosts = allPosts.filter((post) => {
      const postCommonCategories = post.data.category.map((cat) =>
        getEnglishCategory(cat, "zh"),
      );
      return postCommonCategories.includes(category);
    });

    filteredPosts.sort(
      (a, b) =>
        new Date(b.data.pubDate).valueOf() - new Date(a.data.pubDate).valueOf(),
    );

    const pageSize = 12;
    const totalPages = Math.ceil(filteredPosts.length / pageSize);

    return Array.from({ length: totalPages }, (_, index) => ({
      params: { category, page: (index + 1).toString() },
      props: {
        page: {
          data: filteredPosts.slice(index * pageSize, (index + 1) * pageSize),
          currentPage: index + 1,
          lastPage: totalPages,
        },
      },
    }));
  });
}) satisfies GetStaticPaths;

type Post = CollectionEntry<"posts">;

interface Props {
  page: {
    data: Post[];
    currentPage: number;
    lastPage: number;
  };
}

const { category } = Astro.params;
const { page } = Astro.props as Props;

if (typeof category !== "string") {
  throw new Error("Invalid category parameter");
}

const currentLocale = "zh";
const localizedCategory = getCategoryByLanguage(category, "en", currentLocale);
const { title, description } = getCategoryMetadata(localizedCategory, currentLocale);
---

<BaseLayout title={title} description={description}>
  <CategorySchema category={localizedCategory} page={page} locale="zh" />
  <h1 class="sr-only">分类 "{localizedCategory}" 下的所有文章</h1>
  <h2 class="sr-only">文章列表</h2>

  <div class="mx-auto max-w-4xl px-4 py-8">
    <div class="grid grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-3">
      {page.data.map((post) => <PostCard post={post} />)}
    </div>

    <Pagination
      currentPage={page.currentPage}
      lastPage={page.lastPage}
      urlPrev={
        page.currentPage > 1
          ? `/zh/category/${category}/${page.currentPage - 1}`
          : null
      }
      urlNext={
        page.currentPage < page.lastPage
          ? `/zh/category/${category}/${page.currentPage + 1}`
          : null
      }
      basePath={`/zh/category/${category}`}
      maxDisplayedPages={5}
    />
  </div>
</BaseLayout>