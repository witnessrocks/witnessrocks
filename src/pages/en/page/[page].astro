---
import type { GetStaticPaths } from "astro";
import type { CollectionEntry } from "astro:content";
import { getCollection } from "astro:content";
import BaseLayout from "@layouts/BaseLayout.astro";
import HeroCard from "@components/HeroCard.astro";
import PostCard from "@components/CommonCard.astro";
import Pagination from "@components/Pagination.astro";
import { getConstants } from "@consts";

type Post = CollectionEntry<"posts">;

interface PageProps {
  data: Post[];
  currentPage: number;
  lastPage: number;
}

export const getStaticPaths = (async () => {
  const allPosts = await getCollection("posts", ({ id }) =>
    id.startsWith("en/"),
  );
  allPosts.sort(
    (a, b) =>
      new Date(b.data.pubDate).valueOf() - new Date(a.data.pubDate).valueOf(),
  );

  const firstPagePosts = allPosts.slice(0, 15);
  const remainingPosts = allPosts.slice(15);
  const totalPages = 1 + Math.ceil(remainingPosts.length / 12);

  const paths = [
    {
      params: { page: "1" },
      props: {
        page: {
          data: firstPagePosts,
          currentPage: 1,
          lastPage: totalPages,
        },
      },
    },
  ];

  for (let i = 2; i <= totalPages; i++) {
    const pagePosts = remainingPosts.slice((i - 2) * 12, (i - 1) * 12);
    paths.push({
      params: { page: i.toString() },
      props: {
        page: { data: pagePosts, currentPage: i, lastPage: totalPages },
      },
    });
  }

  return paths;
}) satisfies GetStaticPaths;

interface Props {
  page: PageProps;
}

const { page } = Astro.props as Props;

const currentLocale = "en";
const constants = getConstants(currentLocale);
---

<BaseLayout
  title={constants.SITE_TITLE}
  description={constants.SITE_DESCRIPTION}
>
  <div class="mx-auto max-w-6xl px-4 py-8">
    {
      page.currentPage === 1 ? (
        <>
          <div class="mb-4 grid grid-cols-1">
            {page.data.length > 0 && <HeroCard post={page.data[0]} />}
          </div>
          <div class="mb-4 grid grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-2">
            {page.data.slice(1, 3).map((post) => (
              <PostCard post={post} />
            ))}
          </div>
          <div class="grid grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-3">
            {page.data.slice(3).map((post) => (
              <PostCard post={post} />
            ))}
          </div>
        </>
      ) : (
        <div class="grid grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-3">
          {page.data.map((post) => (
            <PostCard post={post} />
          ))}
        </div>
      )
    }

    <Pagination
      currentPage={page.currentPage}
      lastPage={page.lastPage}
      urlPrev={page.currentPage > 1 ? `/en/page/${page.currentPage - 1}` : null}
      urlNext={page.currentPage < page.lastPage
        ? `/en/page/${page.currentPage + 1}`
        : null}
      basePath="/en/page"
      maxDisplayedPages={5}
    />
  </div>
</BaseLayout>
